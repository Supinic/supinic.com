doctype html
html
	head
		block topheader
		include ./header.pug
		include ./datatables.pug

		- if (typeof sortColumn === "undefined") {
		-	sortColumn = 0;
		- }
		- if (typeof sortDirection === "undefined") {
		-	sortDirection = "asc";
		- }
		- if (typeof pageLength === "undefined") {
		-	pageLength = 25;
		- }
		- if (typeof specificFiltering === "undefined") {
		-	specificFiltering = false;
		- }
		- if (typeof disabledFilterColumns === "undefined") {
		-	disabledFilterColumns = [];
		- }

		- if (typeof extraScript !== "undefined") {
		script.
			!{extraScript}
		- }
		- if (typeof extraCSS !== "undefined") {
		style(type="text/css").
			!{extraCSS}
		- }

		script(type="module" src="/static/js/utils.js")

		script.
			$(document).ready(async () => {
				globalThis.utils = await import("/static/js/utils.js");

				const rawHeaders = !{JSON.stringify(head)};
				const headers = rawHeaders.map(i => (typeof i === "string") ? { data: i } : i);
				for (const header of headers) {
					if (header && header.type === "timeDelta") {
						delete header.type;
						header.render = (data, type, row, meta) => {
							if (type === "sort") {
								return row[header.title] ?? 0;
							}
							else {
								return (typeof row[header.title] === "number")
									? `<div data-order="${row[header.title]}">${utils.timeDelta(row[header.title])}</div>`
									: "N/A";
							}
						}
					}
				}

				const table = $("#table").DataTable({
					data: [],
					columns: headers,
					pageLength: #{pageLength},
					order: [#{sortColumn}, "#{sortDirection}"],
					deferRender: true,
					scroller: true,
					scrollCollapse: true
				});

				const tableEl = document.getElementById("table");
				tableEl.style.width = "100%";

				const response = await fetch("#{url}");
				const { data } = await response.json();

				const columns = headers.map(i => i.data);
				const fixedData = data.map(i => {
					for (const key of Object.keys(i)) {
						if (!columns.includes(key)) {
							delete i[key];
						}
					}

					if (typeof globalThis.prepareData === "function") {
						i = globalThis.prepareData(i);
					}

					return i;
				});

				table.clear();
				table.rows.add(fixedData);
				table.draw();

				const spinnerEl = document.getElementById("spinner-loading");
				const parentEl = spinnerEl.parentNode;
				parentEl.removeChild(spinnerEl);

				table.columns.adjust();

				const disabledFilterColumns = JSON.parse(`!{JSON.stringify(disabledFilterColumns)}`);
				const columnValues = JSON.parse(`!{JSON.stringify(columnValues)}`);
				if (#{specificFiltering}) {
					$("td.searchFooter").each(function (i) {
						const position = Number($(this).attr("position"));
						const title = $(this).attr("name");
						const column = columnValues.find(value => value.title === title || value.position === position);
						const value = (column && column.value) || null

						if (disabledFilterColumns.includes(i)) {
							$(this).html(`<input type="text" disabled placeholder="ðŸ”Ž ${title}">`);
						}
						else {
							$(this).html(`<input type="text" placeholder="ðŸ”Ž ${title}">`);

							$("input", this).on("keyup change", function () {
								if (table.column(i).search() !== this.value) {
									table.column(i).search(this.value, true).draw();
								}
							});

							if (value) {
								const input = $(this).children("input").first();
								input.val(value);
								input.trigger("change");
							}
						}
					});
				}
			});

		meta(charset="UTF-8")
		style(type="text/css").
			td {
				word-break: break-word;
			}

			td.key-column {
				min-width: 100px;
			}

			#table_wrapper {
				padding: 10px 40px 0 40px !important;
			}

			td.searchFooter > input {
				width: 100%;
				max-width: 100%;
				min-width: 50px;
			}

		include ./navigation.pug
	body
		block navigation

		- if (skipSpinner !== true) {
		div(class="d-flex flex-column align-items-center" id="spinner-loading")
			h5.
				Loading...
			br
			img(alt="Loading" src="/static/img/ppCircle.gif")
		- }

		table(id="table", class="table table-striped table-bordered")
			thead
				tr
					each key in head
						- if (typeof key === "string") {
						th #{key}
						- }
						- else {
						th #{key.title}
						- }

			- if (specificFiltering) {
				tfoot
					tr
					- var index = 0;
						each key in head
							- if (typeof key === "string") {
							td(class="searchFooter" name=key position=index)
							- }
							- else {
							td(class="searchFooter" name=key.title position=index)
							- }
							- index++;
			- }
