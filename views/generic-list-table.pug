doctype html
html
	head
		block topheader
		include ./header.pug
		include ./datatables.pug

		- if (typeof sortColumn === "undefined") {
		-	sortColumn = 0;
		- }
		- if (typeof sortDirection === "undefined") {
		-	sortDirection = "asc";
		- }
		- if (typeof specificFiltering === "undefined") {
		-	specificFiltering = false;
		- }
		- if (typeof disabledFilterColumns === "undefined") {
		-	disabledFilterColumns = [];
		- }
		- if (typeof head === "undefined") {
		-    head = [];
		- }

		- if (typeof extraScript !== "undefined") {
			script.
				!{extraScript}
		- }
		- if (typeof extraCSS !== "undefined") {
			style.
				!{extraCSS}
		- }

		script.
			$(document).ready(() => {
				if (typeof beforeTableInitalize === "function") {
					beforeTableInitalize();
				}

				const disabledFilterColumns = JSON.parse(`!{JSON.stringify(disabledFilterColumns)}`);
				const columnValues = JSON.parse(`!{JSON.stringify(columnValues)}`);
				const table = $("#table").DataTable({
					lengthMenu: [10, 25, 50, 100, 250, 500, 1000],
					pageLength: #{pageLength},
					order: [#{sortColumn}, "#{sortDirection}"]
				});

				const tableEl = document.getElementById("table");
				tableEl.style.width = "100%";

				if (#{specificFiltering}) {
					$("td.searchFooter").each(function (i) {
						const position = Number($(this).attr("position"));
						const title = $(this).attr("name");
						const column = columnValues.find(value => value.title === title || value.position === position);
						const value = (column && column.value) || null

						if (disabledFilterColumns.includes(i)) {
							$(this).html(`<input type="text" disabled placeholder="ðŸ”Ž ${title}">`);
						}
						else {
							$(this).html(`<input type="text" placeholder="ðŸ”Ž ${title}">`);

							$("input", this).on("keyup change", function () {
								if (table.column(i).search() !== this.value) {
									table.column(i).search(this.value, true).draw();
								}
							});

							if (value) {
								const input = $(this).children("input").first();
								input.val(value);
								input.trigger("change");
							}
						}
					});
				}
			});
		meta(charset="UTF-8")
		style.
			.hoverable {
				cursor: pointer;
				text-decoration: underline dotted;
			}

			.searchables {
				display: none;
			}

			td.searchFooter > input {
				width: 100%;
				max-width: 100%;
				min-width: 50px;
			}

			td a {
				display: block;
			}

			td {
				word-break: break-word;
			}

			#table_wrapper {
				padding: 10px 40px 0 40px !important;
			}

		include ./navigation.pug
	body
		block navigation
		table(id="table", class="table table-striped table-bordered")
			thead
				tr
					each key in head
						- if (typeof headerDescriptions !== "undefined" && headerDescriptions[key]) {
							th(class="hoverable" title=headerDescriptions[key]) #{key}
						- }
						- else {
							th #{key}
						- }
					th.searchables Searchables
			each row in data
				tr
					each key in head
						- if (row[key] && typeof row[key].dataOrder !== "undefined") {
							td(data-order=row[key].dataOrder field=key) !{row[key].value}
						- }
						- else {
							td(field=key) !{row[key]}
						- }
					td.searchables #{row.searchables || ""}

			- if (specificFiltering) {
				tfoot
					tr
					- var index = 0;
						each key in head
							td(class="searchFooter" name=key position=index)
							- index++;
			- }
